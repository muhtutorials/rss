// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: feed_follows.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createFeedFollow = `-- name: CreateFeedFollow :execresult
INSERT INTO feed_follows (id, user_id, feed_id, created_at, updated_at)
VALUES (?, ?, ?, ?, ?)
`

type CreateFeedFollowParams struct {
	ID        int64
	UserID    int64
	FeedID    int64
	CreatedAt time.Time
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createFeedFollow,
		arg.ID,
		arg.UserID,
		arg.FeedID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
DELETE FROM feed_follows WHERE id = ? AND user_id = ?
`

type DeleteFeedFollowParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, arg.ID, arg.UserID)
	return err
}

const getFeedFollowByID = `-- name: GetFeedFollowByID :one
SELECT id, user_id, feed_id, created_at, updated_at FROM feed_follows WHERE id = ?
`

func (q *Queries) GetFeedFollowByID(ctx context.Context, id int64) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, getFeedFollowByID, id)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserFeedFollows = `-- name: GetUserFeedFollows :many
SELECT id, user_id, feed_id, created_at, updated_at FROM feed_follows WHERE user_id = ?
`

func (q *Queries) GetUserFeedFollows(ctx context.Context, userID int64) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, getUserFeedFollows, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
